{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "aadTenantId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "The AAD tenant identifier (GUID)"
            }
        },
        "aadServicePrincipalId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "AAD service application principal id (GUID)"
            }
        },
        "aadUserPrincipalId": {
            "type": "string",
            "metadata": {
                "description": "The user principal id managing the vault. (GUID)"
            }
        },
        "solutionName": {
            "type": "string",
            "defaultValue": "iiotservices",
            "metadata": {
                "description": "The name of the solution"
            }
        },
        "storageName": {
            "type": "string",
            "defaultValue": "[concat('storage', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The name of the storageAccount"
            }
        },
        "storageSkuName": {
            "type": "string",
            "defaultValue": "Standard_LRS",
            "allowedValues": [
                "Standard_LRS", "Standard_GRS", "Standard_RAGRS", "Standard_ZRS", "Premium_LRS"
            ],
            "metadata": {
                "description": "The storage SKU name"
            }
        },
        "storageEndpointSuffix": {
            "type": "string",
            "defaultValue": "core.windows.net",
            "allowedValues": [
                "core.windows.net",
                "core.chinacloudapi.cn",
                "core.cloudapi.de"
            ],
            "metadata": {
                "description": "Suffix added to Azure Storage hostname"
            }
        },
        "documentDBName": {
            "type": "string",
            "defaultValue": "[concat('documentdb-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The name of the documentDB"
            }
        },
        "docDBConsistencyLevel": {
            "type": "string",
            "allowedValues": [
                "Strong",
                "BoundedStaleness",
                "Session",
                "ConsistentPrefix",
                "Eventual"
            ],
            "defaultValue": "Strong",
            "metadata": {
                "description": "The documentDB default consistency level for this account."
            }
        },
        "docDBMaxStalenessPrefix": {
            "type": "int",
            "minValue": 10,
            "maxValue": 1000,
            "defaultValue": 10,
            "metadata": {
                "description": "When documentDB consistencyLevel is set to BoundedStaleness, then this value is required, else it can be ignored."
            }
        },
        "docDBMaxIntervalInSeconds": {
            "type": "int",
            "minValue": 5,
            "maxValue": 600,
            "defaultValue": 5,
            "metadata": {
                "description": "When documentDB consistencyLevel is set to BoundedStaleness, then this value is required, else it can be ignored."
            }
        },
        "serviceBusNamespaceName": {
            "type": "string",
            "defaultValue": "[concat('sb-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]", 
            "metadata": {
                "description": "The name of the Service Bus"
            }
        },
        "serviceBusSkuTier": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [
                "Basic", "Standard"
            ],
            "metadata": {
                "description": "The Azure Service Bus SKU Tier"
            }
        },
        "iotHubName": {
            "type": "string",
            "defaultValue": "[concat('iothub-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The name of Azure IoT Hub"
            }
        },
        "iotHubSku": {
            "type": "string",
            "defaultValue": "S1",
            "allowedValues": [
                "S1", "S2", "S3"
            ],
            "metadata": {
                "description": "The Azure IoT Hub SKU"
            }
        },
        "iotHubPartitionCount": {
            "type": "int",
            "defaultValue": 4,
            "metadata": {
                "description": "The iot hub endpoint partition count"
            }
        },
        "iotHubTier": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [
                "Free", "Standard"
            ],
            "metadata": {
                "description": "The Azure IoT Hub tier"
            }
        },
        "keyVaultName": {
            "type": "string",
            "defaultValue": "[concat('keyvault-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The resource name of the KeyVault"
            }
        },
        "keyVaultSkuName": {
            "type": "string",
            "defaultValue": "Premium",
            "allowedValues": [
                "Standard", "Premium"
            ],
            "metadata": {
                "description": "The KeyVault SKU to use."
            }
        }
    },
    "variables": {
        "tenantId": "[subscription().tenantId]",
        "location": "[resourceGroup().location]",
        "keyVaultApiVersion": "2018-02-14",
        "documentDBApiVersion": "2016-03-19",
        "documentDBResourceId": "[resourceId('Microsoft.DocumentDb/databaseAccounts', parameters('documentDBName'))]",
        "serviceBusApiVersion": "2017-04-01",
        "serviceBusKeyName": "RootManageSharedAccessKey",
        "serviceBusKeyResourceId": "[resourceId('Microsoft.ServiceBus/namespaces/authorizationRules', parameters('serviceBusNamespaceName'), variables('serviceBusKeyName'))]",
        "iotHubApiVersion": "2018-04-01",
        "iotHubResourceId": "[resourceId('Microsoft.Devices/Iothubs', parameters('iotHubName'))]",
        "iotHubKeyName": "iothubowner",
        "iotHubContainerName": "[parameters('iotHubName')]",
        "iotHubKeyResource": "[resourceId('Microsoft.Devices/Iothubs/Iothubkeys', parameters('iotHubName'), variables('iotHubKeyName'))]",
        "iotHubDefaultEndpoint": "events",
        "deviceNotificationRouteName": "DeviceNotifications",
        "onboardingConsumerGroupName": "onboarding",
        "storageApiVersion": "2017-06-01",
        "storageResourceId": "[resourceId('Microsoft.Storage/storageAccounts/',  parameters('storageName'))]"
    },
    "resources": [
        {
            "comments": "KeyVault Premium Sku for secrets and certificate store.",
            "type": "Microsoft.KeyVault/vaults",
            "name": "[parameters('keyVaultName')]",
            "apiVersion": "[variables('keyVaultApiVersion')]",
            "location": "[variables('location')]",
            "properties": {
                "enabledForDeployment": false,
                "enabledForTemplateDeployment": false,
                "enabledForVolumeEncryption": false,
                "tenantId": "[parameters('aadTenantId')]",
                "sku": {
                    "name": "[parameters('keyVaultSkuName')]",
                    "family": "A"
                },
                "accessPolicies": []
            }
        },
        {
            "comments": "KeyVault service principal permissions.",
            "type": "Microsoft.KeyVault/vaults/accessPolicies",
            "name": "[concat(parameters('keyVaultName'), '/replace')]",
            "apiVersion": "[variables('keyVaultApiVersion')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            ],
            "properties": {
                "accessPolicies": [
                    {
                        "tenantId": "[parameters('aadTenantId')]",
                        "objectId": "[parameters('aadServicePrincipalId')]",
                        "permissions": {
                            "secrets": [ 
                                "get" 
                            ],
                            "certificates": [ 
                                "get",
                                "list" 
                            ]
                        }
                    },
                    {
                        "tenantId": "[parameters('aadTenantId')]",
                        "objectId": "[parameters('aadUserPrincipalId')]",
                        "permissions": {
                            "keys": [ 
                                "get", 
                                "list", 
                                "sign" 
                            ],
                            "secrets": [ 
                                "get", 
                                "list", 
                                "set", 
                                "delete" 
                            ],
                            "certificates": [ 
                                "get", 
                                "list", 
                                "update", 
                                "create", 
                                "import"
                            ]
                        }
                    }
                ]
            }
        },
        {
            "comments": "Azure IoT Hub",
            "apiVersion": "[variables('iotHubApiVersion')]",
            "type": "Microsoft.Devices/Iothubs",
            "name": "[parameters('iotHubName')]",
            "location": "[variables('location')]",
            "sku": {
                "name": "[parameters('iotHubSku')]",
                "tier": "[parameters('iotHubTier')]",
                "capacity": 1
            },
            "properties": {
                "location": "[variables('location')]",
                "ipFilterRules": [],
                "eventHubEndpoints": {
                    "events": {
                        "retentionTimeInDays": 1,
                        "partitionCount": "[parameters('iotHubPartitionCount')]"
                    },
                    "operationsMonitoringEvents": {
                        "retentionTimeInDays": 1,
                        "partitionCount": 4
                    }
                },
                "routing": {
                    "endpoints": {
                        "serviceBusQueues": [],
                        "serviceBusTopics": [],
                        "eventHubs": [],
                        "storageContainers": []
                    },
                    "routes": [],
                    "fallbackRoute": {
                        "name": "$fallback",
                        "source": "DeviceMessages",
                        "condition": "true",
                        "endpointNames": [
                            "events"
                        ],
                        "isEnabled": true
                    }
                },
                "storageEndpoints": {
                    "$default": {
                        "sasTtlAsIso8601": "PT1H",
                        "connectionString": "[concat('DefaultEndpointsProtocol=https;EndpointSuffix=', parameters('storageEndpointSuffix'), ';AccountName=', parameters('storageName'), ';AccountKey=', listKeys(variables('storageResourceId'), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value)]",
                        "containerName": "[variables('iotHubContainerName')]"
                    }
                },
                "messagingEndpoints": {
                    "fileNotifications": {
                        "lockDurationAsIso8601": "PT1M",
                        "ttlAsIso8601": "PT1H",
                        "maxDeliveryCount": 10
                    }
                },
                "enableFileUploadNotifications": true,
                "cloudToDevice": {
                    "maxDeliveryCount": 10,
                    "defaultTtlAsIso8601": "PT1H",
                    "feedback": {
                        "lockDurationAsIso8601": "PT1M",
                        "ttlAsIso8601": "PT1H",
                        "maxDeliveryCount": 10
                    }
                },
                "features": "None"
            },
            "dependsOn": [
                "[variables('storageResourceId')]"
            ]
        },
        {
            "comments": "Consumer Group of IoT Hub",
            "apiVersion": "[variables('iotHubApiVersion')]",
            "name": "[concat(parameters('iotHubName'), '/events/', variables('onboardingConsumerGroupName'))]",
            "type": "Microsoft.Devices/Iothubs/eventhubEndpoints/ConsumerGroups",
            "dependsOn": [
                "[resourceId('Microsoft.Devices/Iothubs', parameters('iotHubName'))]",
            ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/', 'PCS_IOTHUB_CONNSTRING')]",
            "apiVersion": "[variables('keyVaultApiVersion')]",
            "properties": {
                "value": "[concat('HostName=', reference(variables('iotHubResourceId')).hostName, ';SharedAccessKeyName=', variables('iotHubKeyName'), ';SharedAccessKey=', listkeys(variables('iotHubKeyResource'), variables('iotHubApiVersion')).primaryKey)]",
                "contentType": "text/plain"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Devices/Iothubs', parameters('iotHubName'))]",
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            ]
        },
        {
            "comments": "Storage account",
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[parameters('storageName')]",
            "apiVersion": "[variables('storageApiVersion')]",
            "location": "[variables('location')]",
            "kind": "Storage",
            "sku": {
                "name": "[parameters('storageSkuName')]"
            },
            "properties": {
                "networkAcls": {
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [],
                    "ipRules": [],
                    "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                    "services": {
                        "file": {
                            "enabled": true
                        },
                        "blob": {
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                }
            },
            "dependsOn": []
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/', 'PCS_IOTHUBREACT_AZUREBLOB_KEY')]",
            "apiVersion": "[variables('keyVaultApiVersion')]",
            "properties": {
                "value": "[listKeys(variables('storageResourceId'), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value]",
                "contentType": "text/plain"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageName'))]",
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            ]
        },
        {
            "comments": "Azure CosmosDb",
            "apiVersion": "[variables('documentDBApiVersion')]",
            "type": "Microsoft.DocumentDb/databaseAccounts",
            "name": "[parameters('documentDBName')]",
            "location": "[variables('location')]",
            "properties": {
                "name": "[parameters('documentDBName')]",
                "databaseAccountOfferType": "standard",
                "consistencyPolicy": {
                    "defaultConsistencyLevel": "[parameters('docDBConsistencyLevel')]",
                    "maxStalenessPrefix": "[parameters('docDBMaxStalenessPrefix')]",
                    "maxIntervalInSeconds": "[parameters('docDBMaxIntervalInSeconds')]"
                }
            },
            "dependsOn": []
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/', 'PCS_TELEMETRY_DOCUMENTDB_CONNSTRING')]",
            "apiVersion": "[variables('keyVaultApiVersion')]",
            "properties": {
                "value": "[concat('\"', 'AccountEndpoint=', reference(variables('documentDBResourceId')).documentEndpoint, ';AccountKey=', listkeys(variables('documentDBResourceId'), variables('documentDBApiVersion')).primaryMasterKey, ';', '\"')]",
                "contentType": "text/plain"
            },
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDb/databaseAccounts', parameters('documentDBName'))]",
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            ]
        },
        {
            "comments": "Azure Service Bus Namespace",
            "apiVersion": "[variables('serviceBusApiVersion')]",
            "type": "Microsoft.ServiceBus/namespaces",
            "name": "[parameters('serviceBusNamespaceName')]",
            "location": "[variables('location')]",
            "sku": {
                "name": "[parameters('serviceBusSkuTier')]"
            },
            "properties": { 
            },
            "dependsOn": []
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/', 'PCS_SERVICEBUS_CONNSTRING')]",
            "apiVersion": "[variables('keyVaultApiVersion')]",
            "properties": {
                "value": "[listkeys(variables('serviceBusKeyResourceId'), variables('serviceBusApiVersion')).primaryConnectionString]",
                "contentType": "text/plain"
            },
            "dependsOn": [
                "[resourceId('Microsoft.ServiceBus/namespaces', parameters('serviceBusNamespaceName'))]",
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            ]
        }
    ],
    "outputs": {
        "iothub-connstring": {
            "type": "string",
            "value": "[concat('HostName=', reference(variables('iotHubResourceId')).hostName, ';SharedAccessKeyName=', variables('iotHubKeyName'), ';SharedAccessKey=', listkeys(variables('iotHubKeyResource'), variables('iotHubApiVersion')).primaryKey)]"
        },
        "docdb-connstring": {
            "type": "string",
            "value": "[concat('\"', 'AccountEndpoint=', reference(variables('documentDBResourceId')).documentEndpoint, ';AccountKey=', listkeys(variables('documentDBResourceId'), variables('documentDBApiVersion')).primaryMasterKey, ';', '\"')]"
        },
        "sb-connstring": {
            "type": "string",
            "value": "[listkeys(variables('serviceBusKeyResourceId'), variables('serviceBusApiVersion')).primaryConnectionString]"
        },
        "iothub-name": {
            "type": "string",
            "value": "[reference(variables('iotHubResourceId')).eventHubEndpoints.events.path]"
        },
        "iothub-endpoint": {
            "type": "string",
            "value": "[reference(variables('iotHubResourceId')).eventHubEndpoints.events.endpoint]"
        },
        "iothub-consumer-group": {
            "type": "string",
            "value": "[variables('onboardingConsumerGroupName')]"
        },
        "azureblob-account": {
            "type": "string",
            "value": "[parameters('storageName')]"
        },
        "azureblob-key": {
            "type": "string",
            "value": "[listKeys(variables('storageResourceId'), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value]"
        },
        "azureblob-endpoint-suffix": {
            "type": "string",
            "value": "[parameters('storageEndpointSuffix')]"
        },
        "keyvault-url": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))).vaultUri]"
        },
        "resourceGroup" : {
            "type": "string",
            "value": "[resourceGroup().name]"
        }       
    }
}